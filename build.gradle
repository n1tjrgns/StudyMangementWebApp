plugins {
    id 'org.springframework.boot' version '2.2.4.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id "com.github.node-gradle.node" version "2.2.3"
    //id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
}

group = 'com.jpa'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'
configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}
repositories {
    mavenCentral()
}
dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-devtools
    implementation group: 'org.springframework.boot', name: 'spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'mysql:mysql-connector-java'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    compileOnly 'org.projectlombok:lombok:1.18.12'
    annotationProcessor 'org.projectlombok:lombok:1.18.12'
    testCompileOnly 'org.projectlombok:lombok:1.18.12'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation group: 'com.tngtech.archunit', name: 'archunit-junit5-api', version: '0.13.1'
    testImplementation group: 'com.tngtech.archunit', name: 'archunit-junit5-engine', version: '0.13.1'
    implementation group: 'org.thymeleaf.extras', name: 'thymeleaf-extras-springsecurity5' //타임리프 시큐리티
    implementation group: 'com.github.eirslett', name: 'frontend-maven-plugin', version: '1.8.0'
    implementation group: 'org.modelmapper', name: 'modelmapper', version: '2.3.6' //모델 매퍼
    implementation group: 'org.postgresql', name: 'postgresql'
    implementation group: 'com.querydsl', name: 'querydsl-jpa' // Query DSL 추가
    implementation group: 'com.querydsl', name: 'querydsl-apt' // Query DSL 추가
    implementation platform('org.testcontainers:testcontainers-bom:1.14.3') //import bom
    testImplementation "org.testcontainers:testcontainers:1.14.3"
    testImplementation('org.testcontainers:postgresql') //no version specified
    testImplementation "org.testcontainers:junit-jupiter:1.14.3"
    testImplementation "org.testcontainers:postgresql:1.14.3"
}

test {
    useJUnitPlatform()
}
node {
    version = '14.5.0'
    download = true
    nodeModulesDir = file("${projectDir}/src/main/resources/static")
}
task copyFrontLib(type: Copy) {
    from "${projectDir}/src/main/resources/static"
    into "${projectDir}/build/resources/main/static/."
}
copyFrontLib.dependsOn npmInstall
compileJava.dependsOn copyFrontLib


//querydsl 적용
//apply plugin: "com.ewerk.gradle.plugins.querydsl" //plugin 적용
//def querydslSrcDir = 'src/main/generated' //Qclass 생성 위치

/*querydsl {
    library = "com.querydsl:querydsl-apt"
    jpa = true
    querydslSourcesDir = querydslSrcDir
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', querydslSrcDir]
        }
    }
}

compileQuerydsl{
    options.annotationProcessorPath = configurations.querydsl
}

configurations {
    querydsl.extendsFrom compileClasspath
}*/

//cannot find symbol은 해결됏으나 duplicate 발생
configure("querydsl-sample") {
    apply plugin: "io.spring.dependency-management"

    dependencies {
        compile("com.querydsl:querydsl-core")
        compile("com.querydsl:querydsl-jpa")

        annotationProcessor("com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa") // querydsl JPAAnnotationProcessor 사용 지정
        annotationProcessor("jakarta.persistence:jakarta.persistence-api") // java.lang.NoClassDefFoundError(javax.annotation.Entity) 발생 대응
        annotationProcessor("jakarta.annotation:jakarta.annotation-api") // java.lang.NoClassDefFoundError (javax.annotation.Generated) 발생 대응
    }

    // clean 태스크와 cleanGeneatedDir 태스크 중 취향에 따라서 선택하세요.
    /** clean 태스크 실행시 QClass 삭제 */
    clean {
        delete file('src/main/generated') // 인텔리제이 Annotation processor 생성물 생성위치
    }

    /**
     * 인텔리제이 Annotation processor 에 생성되는 'src/main/generated' 디렉터리 삭제
     */
    task cleanGeneatedDir(type: Delete) { // 인텔리제이 annotation processor 가 생성한 Q클래스가 clean 태스크로 삭제되는 게 불편하다면 둘 중에 하나를 선택
        delete file('src/main/generated')
    }
}
